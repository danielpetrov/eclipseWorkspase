<?php
/* Задача 2:
Използвайки разделянето на масива на части
(партишъни) напишете програма, която да намира k-тия най-
голям елемент в масив.
Пример :
Масив [5, 8, 73, 0, 43, 3424, 78, 98], k = 3
Изход : 78
Масив [5, 8, 73, 0, 43, 3424, 78, 98], k = 1
Изход :  3424 */

$array = [5, 8, 73, 0, 43, 3424, 78, 98];
$k = 3;

//echo partitionWithIndex($array, 0, count($array) - 1, 6);
echo kMaxElementOfArray(1, 0, count($array) - 1,$array);
//echo phpinfo();
function kMaxElementOfArray($k, $startIndex, $endIndex, &$array){
	$needle = $length - $k;
	//$randomPivot = rand($startIndex, $endIndex);
	
	$possitionOfRandomPivotInTheArrayAsTheArrayIsSorted = partitionWithIndex($array, $startIndex, $endIndex);
	//print_r($array);
	if ($startIndex == $endIndex) {
		echo "z";
		echo $possitionOfRandomPivotInTheArrayAsTheArrayIsSorted, $array[$possitionOfRandomPivotInTheArrayAsTheArrayIsSorted]; 
		return $array[$possitionOfRandomPivotInTheArrayAsTheArrayIsSorted];
	}
	/**
	 * The bottom of the recursion.
	 * True if the needle is found.
	 */
	if ($possitionOfRandomPivotInTheArrayAsTheArrayIsSorted == $needle) {
		return $array[$possitionOfRandomPivotInTheArrayAsTheArrayIsSorted];
	} else if($possitionOfRandomPivotInTheArrayAsTheArrayIsSorted > $needle) {
		kMaxElementOfArray($k, $startIndex, $possitionOfRandomPivotInTheArrayAsTheArrayIsSorted - 1, $array);
	} else {
		kMaxElementOfArray($k, $possitionOfRandomPivotInTheArrayAsTheArrayIsSorted + 1, $endIndex, $array);
	}
}

/**
 * Finds the possition of element with index - $pivotIndex in array as the array is sorted.
 * The function is working with copy of the array and returns only the index.
 * @param array $array
 * @param int $start
 * @param int $end
 * @param int $pivotIndex
 * @return int
 */
function partitionWithIndex(&$array, $start, $end, $pivotIndex = FALSE){
	if ($pivotIndex !== FALSE) {
	swap($array, $pivotIndex, $end);
	}
	
	$pivot = $array[$end];
	$indexForSwap = $start;
	
	for ($i = $start; $i < $end - 1; $i++) {
		if ($array[$i] <= $pivot) {
			swap($array, $indexForSwap++, $i);
		}
	}
	swap($array, $indexForSwap, $i);
	
	/**
	 * returns the possition of the element with index - pivot index in the array
	 * if pivot index is not set returns the possition of the last element
	 */
	return $indexForSwap;
}

function swap(&$array, $index1, $index2) {
	$swapy = $array [$index1];
	$array [$index1] = $array [$index2];
	$array [$index2] = $swapy;
}