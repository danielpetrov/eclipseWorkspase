<?php
require_once 'Task1.php';
//$array = $someArray;
//print_r($array);

//we asume that all rows have the same length, otherwise we shoud count them everytime, 
//which will be slow
echo $allRowsCount = count($someArray) . PHP_EOL;
echo $colLength = count($someArray[0]) . PHP_EOL;
$needle = 6;
var_dump(binarySearchInMulty($needle, $someArray, [0,0], [$allRowsCount - 1, $colLength - 1], $allRowsCount, $colLength));
function binarySearchInMulty($needle, $haystack, $start, $end, $allRowsCount, $colLength){
	//bottom - if start > end, 0 is index for the row, 1 is index for the column
	if ($start[0] >= $end[0] && $start[1] >= $end[1]) {
		return -1;
	}
	$middle = findMiddle($haystack, $start, $end, $colLength);
	print_r($middle);
	echo $haystack[$middle[0]][$middle[1]];
	if ($haystack[$middle[0]][$middle[1]] > $needle) {
		return binarySearchInMulty($needle, $haystack, $start, decreaseMiddle($middle, $colLength), $allRowsCount, $colLength);
	} else if($haystack[$middle[0]][$middle[1]] < $needle) {
		return binarySearchInMulty($needle, $haystack, increaseMiddle($middle, $allRowsCount, $colLength), $end, $allRowsCount, $colLength);
	} else {
		return $middle;
	}
}

function increaseMiddle($middle, $allRowsCount, $colLength){
	if ($middle[1] < $colLength - 1) {
		$middle[1]++;
	} else if($middle[0] < $allRowsCount - 1) {
		$middle[0]++;
		$middle[1] = 0;
	}
	return $middle;
}

function decreaseMiddle($middle, $colLength){
	if ($middle[1] > 0) {
		$middle[1]--;
	} else if($middle[0] > 0) {
		$middle[0]--;
		$middle[1] = $colLength - 1;
	}
	return $middle;
}

function findMiddle($array, $start, $end, $colLength){
	echo "start[]- $start[0] $start[1], end[] - $end[0] $end[1]" . PHP_EOL;
	$startPoss = ($colLength * $start[0]) + $start[1];
	$endPoss = ($colLength * $end[0]) + ($end[1] + 1);
	
	$middlePoss = (int)(($startPoss + $endPoss) / 2);
	echo "start - $startPoss, end - $endPoss, middle - $middlePoss";
	if ($middlePoss > $colLength) {
		$middle[0] = floor(($middlePoss - 1) / $colLength);
		$middle[1] = ($middlePoss - 1) % $colLength;
	} else {
		$middle[0] = 0;
		$middle[1] = $middlePoss;
	}
	
	return $middle;
}